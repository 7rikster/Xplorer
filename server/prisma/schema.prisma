

generator client {
    provider = "prisma-client-js"
  }
  
  datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
  }
  
  
  model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userName String @unique 
    name String
    email String @unique
    firebaseId String @unique
    photoUrl String
    credits  Int    @default(5)
  
    role Role

    reviews  Review[]

    userTrips   UserTrip[]

    tripBookings TripBooking[]

    groupMemberships GroupMember[]
    adminOf   Group[]    @relation("GroupAdmin")
    messages  Message[]

    creditsPurchase CreditsPurchase[]
  
  }
  
  enum Role {
    CLIENT
    ADMIN
  }
  
  
  enum TypeofPlace{
    DESTINATION
    EVENT
    HOTEL
    RESTAURANT
  }
  
  model Destination{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    placeId String @unique
    name String
    photoUrl String
    publicId String
    rating Int
    location String
  }

  model Hoarding{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    placeId String @unique
    name String
    photoUrl String
    publicId String
    location String
    description String
  }

  model Faq {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    question  String
    answer    String
    trip      AdminTrip     @relation(fields: [tripId], references: [id])
    tripId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }

  model Review {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    rating    Int      // 1 to 5
    comment   String
    imageUrl  String
    publicId  String
    userDisplayName  String
    userPhoto String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user      User     @relation(fields: [userId], references: [id])
    userId    String

    trip      AdminTrip     @relation(fields: [tripId], references: [id])
    tripId    String
  }

  model AdminTrip{
    id String @id @default(auto()) @map("_id") @db.ObjectId

    createdAt DateTime

    tripDetail String
    imageUrls String[]
    city String
    country String
    groupType String
    budget String

    faqs      Faq[]
    reviews  Review[]

    bookings TripBooking[]
  }

  model UserTrip{
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    userId      String @db.ObjectId
    user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt   DateTime

    tripDetail  String
    imageUrls   String[]
    city        String
    country     String
    groupType   String
    budget      String
  }

  model Group {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  name      String

  photoUrl String

  // Explicit join relation
  members   GroupMember[]

  admin     User             @relation("GroupAdmin", fields: [adminId], references: [id])
  adminId   String           @db.ObjectId

  messages  Message[]

  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model GroupMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String   @db.ObjectId

  joinedAt  DateTime @default(now())
}

model Message {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String

  sender    User      @relation(fields: [senderId], references: [id])
  senderId  String    @db.ObjectId

  group     Group     @relation(fields: [groupId], references: [id])
  groupId   String    @db.ObjectId

  attachments Attachment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Attachment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  fileType   String

  message    Message  @relation(fields: [messageId], references: [id])
  messageId  String   @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}



model TripBooking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  trip        AdminTrip @relation(fields: [tripId], references: [id])
  tripId      String   @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  isCompleted Boolean @default(false)
  totalAmount Int
  paymentIntent String @unique
  adults      Int
  children    Int
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}


model CreditsPurchase {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId

  isCompleted Boolean @default(false)
  totalAmount Int
  packageType String
  paymentIntent String @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}